// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc0.Tank2017Preseason;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.TalonSRX;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import com.ctre.CANTalon.FeedbackDevice;
import com.ctre.CANTalon.TalonControlMode;
import com.ctre.CANTalon;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public static CANTalon driveTrainR1;
	public static CANTalon driveTrainR2;
	public static CANTalon driveTrainL1;
	public static CANTalon driveTrainL2;
	public static MotionProfile motionProfileL;
	public static MotionProfile motionProfileR;
	public static Compressor driveTrainCompressor1;
	public static DoubleSolenoid driveTraingearshifter;

	// public static RobotDrive Tank ;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	public static void init() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		driveTrainR1 = new CANTalon(5);
		LiveWindow.addActuator("DriveTrain", "R1", (CANTalon) driveTrainR1);

		driveTrainR2 = new CANTalon(6);
		LiveWindow.addActuator("DriveTrain", "R2", (CANTalon) driveTrainR2);

		driveTrainL1 = new CANTalon(1);
		LiveWindow.addActuator("DriveTrain", "L1", (CANTalon) driveTrainL1);

		driveTrainL2 = new CANTalon(2);
		LiveWindow.addActuator("DriveTrain", "L2", (CANTalon) driveTrainL2);

		driveTrainCompressor1 = new Compressor(1);
		driveTrainCompressor1.start();

		driveTraingearshifter = new DoubleSolenoid(0, 0, 1);
		LiveWindow.addActuator("DriveTrain", "gear shifter", driveTraingearshifter);

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		driveTrainL1.setFeedbackDevice(FeedbackDevice.QuadEncoder);
		driveTrainL1.changeControlMode(TalonControlMode.Speed);
		driveTrainL1.configNominalOutputVoltage(+0.0f, -0.0f);
		driveTrainL1.configPeakOutputVoltage(+12.0f, -12.0f);
		driveTrainL1.configEncoderCodesPerRev(1024);
		driveTrainL1.setInverted(false);
		driveTrainL1.setProfile(0);
		driveTrainL1.reverseSensor(true);
		driveTrainL1.setF(0.2397);
		driveTrainL1.setP(0.12);
		driveTrainL1.setI(0.0);
		driveTrainL1.setD(1.2);
		motionProfileL = new MotionProfile(driveTrainL1, GeneratedMotionProfile.PointsL,
				GeneratedMotionProfile.kNumPointsL);

		driveTrainL2.changeControlMode(TalonControlMode.Follower);
		driveTrainL2.set(1);
		driveTrainL2.setInverted(false);

		driveTrainR1.setFeedbackDevice(FeedbackDevice.QuadEncoder);
		driveTrainR1.reverseSensor(true);
		driveTrainR1.changeControlMode(TalonControlMode.Speed);
		driveTrainR1.configNominalOutputVoltage(+0.0f, -0.0f);
		driveTrainR1.configPeakOutputVoltage(+12.0f, -12.0f);
		driveTrainR1.configEncoderCodesPerRev(1024);
		driveTrainR1.setProfile(0);
		driveTrainR1.setInverted(true);
		driveTrainR1.setF(0.245);
		driveTrainR1.setP(0.12);
		driveTrainR1.setI(0.0);
		driveTrainR1.setD(1.2);
		motionProfileR = new MotionProfile(driveTrainR1, GeneratedMotionProfile.PointsR,
				GeneratedMotionProfile.kNumPointsR);

		driveTrainR2.changeControlMode(TalonControlMode.Follower);
		driveTrainR2.set(5);
		driveTrainR2.setInverted(true);

	}
}
