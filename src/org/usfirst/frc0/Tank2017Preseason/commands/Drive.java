// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc0.Tank2017Preseason.commands;

import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc0.Tank2017Preseason.Robot;
import org.usfirst.frc0.Tank2017Preseason.RobotMap;

/**
 *
 */
public class Drive extends Command {
	boolean shift = false;
	boolean pressed = false;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public Drive() {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize() {
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		try {

			double xValue;
			double yValue;
			double targetSpeedL;
			double targetSpeedR;
			double maxSpeed = 600;
			
			if (Robot.oi.controller1.getRawButton(1)) {
				if (!pressed) {
					shift = !shift;
					pressed = true;
				}
			} else {
				pressed = false;
			}

			if (shift) {
				RobotMap.driveTraingearshifter.set(Value.kForward);

			} else {
				RobotMap.driveTraingearshifter.set(Value.kReverse);
			}

			if (Robot.arcade) {
				xValue = Robot.oi.controller1.getRawAxis(2);
				xValue = xValue * xValue * xValue;
				yValue = Robot.oi.controller1.getRawAxis(1);
				yValue = yValue * yValue * yValue;

				targetSpeedL = yValue * maxSpeed - xValue * maxSpeed;
				targetSpeedR = yValue * maxSpeed + xValue * maxSpeed;

				double max = targetSpeedL;
				if (Math.abs(targetSpeedR) > Math.abs(max)) {
					max = targetSpeedR;
				}
				
				if (max > 600) {
					targetSpeedL /= max;
					targetSpeedR /= max;
				}

				if (Math.abs(targetSpeedL) > Math.abs(RobotMap.driveTrainL1.getSpeed())) {
					RobotMap.driveTrainL1.setVoltageRampRate(8.0);
				} else {
					RobotMap.driveTrainL1.setVoltageRampRate(24.0);
				}

				if (Math.abs(targetSpeedR) > Math.abs(RobotMap.driveTrainR1.getSpeed())) {
					RobotMap.driveTrainR1.setVoltageRampRate(8.0);
				} else {
					RobotMap.driveTrainR1.setVoltageRampRate(24.0);
				}

				RobotMap.driveTrainL1.set(targetSpeedL);
				RobotMap.driveTrainR1.set(targetSpeedR);
				SmartDashboard.putNumber("Speed Right", targetSpeedR);
				SmartDashboard.putNumber("Speed Left", targetSpeedL);

			} else {

				xValue = Robot.oi.controller1.getRawAxis(1);
				// xValue = xValue * xValue * xValue;
				yValue = Robot.oi.controller1.getRawAxis(3);
				// yValue = yValue * yValue * yValue;
				targetSpeedL = 600.0 * xValue;
				targetSpeedR = 600.0 * yValue;
				if (Math.abs(targetSpeedL) > Math.abs(RobotMap.driveTrainL1.getSpeed())) {
					RobotMap.driveTrainL1.setVoltageRampRate(8.0);
				} else {
					RobotMap.driveTrainL1.setVoltageRampRate(24.0);
				}

				if (Math.abs(targetSpeedR) > Math.abs(RobotMap.driveTrainR1.getSpeed())) {
					RobotMap.driveTrainR1.setVoltageRampRate(8.0);
				} else {
					RobotMap.driveTrainR1.setVoltageRampRate(24.0);
				}
				RobotMap.driveTrainL1.set(targetSpeedL);
				RobotMap.driveTrainR1.set(targetSpeedR);
			}
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return false;
	}

	// Called once after isFinished returns true
	protected void end() {
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
	}
}
